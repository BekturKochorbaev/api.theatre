from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver

from theatre.models import Event


class SeatTemplate(models.Model):
    row = models.PositiveIntegerField(verbose_name='–†—è–¥')
    number = models.PositiveIntegerField(verbose_name='–ú–µ—Å—Ç–æ')
    price = models.PositiveIntegerField(verbose_name='–¶–µ–Ω–∞')

    class Meta:
        verbose_name = "–®–∞–±–ª–æ–Ω –º–µ—Å—Ç–∞"
        verbose_name_plural = "–®–∞–±–ª–æ–Ω—ã –º–µ—Å—Ç"
        unique_together = ('row', 'number')

    def __str__(self):
        return f"–†—è–¥ {self.row}, –ú–µ—Å—Ç–æ {self.number} ‚Äî {self.price}‚ÇΩ"


class Seat(models.Model):
    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='seats', verbose_name='–ö–æ–Ω—Ü–µ—Ä—Ç')
    row = models.PositiveIntegerField(verbose_name='–†—è–¥')
    number = models.PositiveIntegerField(verbose_name='–ú–µ—Å—Ç–æ')
    price = models.PositiveIntegerField(verbose_name='–¶–µ–Ω–∞')
    is_sold = models.BooleanField(default=False, verbose_name='–ü—Ä–æ–¥–∞–Ω–æ')

    class Meta:
        verbose_name = "–ú–µ—Å—Ç–æ"
        verbose_name_plural = verbose_name
        unique_together = ('event', 'row', 'number')

    def __str__(self):
        return f"{self.id} - {self.event.title}: –†—è–¥ {self.row}, –ú–µ—Å—Ç–æ {self.number} ‚Äî {self.price} - {self.is_sold}"


class Ticket(models.Model):
    seat = models.ForeignKey(Seat, on_delete=models.CASCADE, related_name='ticket', verbose_name='–ú–µ—Å—Ç–æ')
    buyer_name = models.CharField(max_length=100, verbose_name='–ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
    buyer_phone = models.CharField(max_length=20, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
    buyer_email = models.EmailField(null=True, blank=True, verbose_name='Email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏')

    class Meta:
        verbose_name = "–ë–∏–ª–µ—Ç"
        verbose_name_plural = verbose_name

    def __str__(self):
        return f"–ë–∏–ª–µ—Ç {self.seat} ‚Äî {self.buyer_name}"


# üëá –°–∏–≥–Ω–∞–ª ‚Äî –≤–Ω–∏–∑—É —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π!
@receiver(post_save, sender=Event)
def create_seats_for_event(sender, instance, created, **kwargs):
    """
    –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤—Å–µ –º–µ—Å—Ç–∞
    –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤ SeatTemplate.
    """
    if created:
        templates = SeatTemplate.objects.all()
        seats = [
            Seat(
                event=instance,
                row=t.row,
                number=t.number,
                price=t.price,
            )
            for t in templates
        ]
        Seat.objects.bulk_create(seats)
